{"ast":null,"code":"import _objectSpread from \"/home/igor/www/roommates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"/home/igor/www/roommates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"/home/igor/www/roommates/src/components/Input/CurrencyInput.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useEffect, useRef } from \"react\";\nimport { useField } from \"@unform/core\";\nimport MaskedInput from \"react-text-mask\";\nimport createNumberMask from \"text-mask-addons/dist/createNumberMask\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar defaultMaskOptions = {\n  prefix: \"$\",\n  suffix: \"\",\n  includeThousandsSeparator: true,\n  thousandsSeparatorSymbol: \",\",\n  allowDecimal: true,\n  decimalSymbol: \".\",\n  decimalLimit: 2,\n  // how many digits allowed after the decimal\n  integerLimit: 7,\n  // limit length of integer numbers\n  allowNegative: false,\n  allowLeadingZeroes: false\n};\nexport var CurrencyInput = function CurrencyInput(_ref) {\n  _s();\n\n  var name = _ref.name,\n      type = _ref.type,\n      label = _ref.label,\n      value = _ref.value,\n      inputMask = _ref.inputMask,\n      maskOptions = _ref.maskOptions,\n      rest = _objectWithoutProperties(_ref, [\"name\", \"type\", \"label\", \"value\", \"inputMask\", \"maskOptions\"]);\n\n  var inputRef = useRef(null);\n\n  var _useField = useField(name),\n      fieldName = _useField.fieldName,\n      registerField = _useField.registerField,\n      defaultValue = _useField.defaultValue,\n      error = _useField.error;\n\n  var currencyMask = createNumberMask(_objectSpread(_objectSpread({}, defaultMaskOptions), maskOptions));\n  useEffect(function () {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: \"value\",\n      setValue: function setValue(ref, value) {\n        ref.setInputValue(value);\n      },\n      clearValue: function clearValue(ref) {\n        ref.setInputValue(\"\");\n      }\n    });\n  }, [fieldName, registerField]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(MaskedInput, _objectSpread({\n      name: fieldName,\n      ref: inputRef,\n      defaultValue: defaultValue\n    }, rest), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, _this), error && /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        color: \"#f00\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(CurrencyInput, \"o+3KmZAHh1jxxWau4P+Ju1WJiEk=\", false, function () {\n  return [useField];\n});\n\n_c = CurrencyInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"CurrencyInput\");","map":{"version":3,"sources":["/home/igor/www/roommates/src/components/Input/CurrencyInput.tsx"],"names":["useEffect","useRef","useField","MaskedInput","createNumberMask","defaultMaskOptions","prefix","suffix","includeThousandsSeparator","thousandsSeparatorSymbol","allowDecimal","decimalSymbol","decimalLimit","integerLimit","allowNegative","allowLeadingZeroes","CurrencyInput","name","type","label","value","inputMask","maskOptions","rest","inputRef","fieldName","registerField","defaultValue","error","currencyMask","ref","current","path","setValue","setInputValue","clearValue","color"],"mappings":";;;;;;;AAAA,SAA8BA,SAA9B,EAAyCC,MAAzC,QAAuD,OAAvD;AACA,SAASC,QAAT,QAAyB,cAAzB;AAGA,OAAOC,WAAP,MAAwB,iBAAxB;AACA,OAAOC,gBAAP,MAA6B,wCAA7B;;AAEA,IAAMC,kBAAkB,GAAG;AACzBC,EAAAA,MAAM,EAAE,GADiB;AAEzBC,EAAAA,MAAM,EAAE,EAFiB;AAGzBC,EAAAA,yBAAyB,EAAE,IAHF;AAIzBC,EAAAA,wBAAwB,EAAE,GAJD;AAKzBC,EAAAA,YAAY,EAAE,IALW;AAMzBC,EAAAA,aAAa,EAAE,GANU;AAOzBC,EAAAA,YAAY,EAAE,CAPW;AAOR;AACjBC,EAAAA,YAAY,EAAE,CARW;AAQR;AACjBC,EAAAA,aAAa,EAAE,KATU;AAUzBC,EAAAA,kBAAkB,EAAE;AAVK,CAA3B;AAwCA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,OAQX;AAAA;;AAAA,MAPhBC,IAOgB,QAPhBA,IAOgB;AAAA,MANhBC,IAMgB,QANhBA,IAMgB;AAAA,MALhBC,KAKgB,QALhBA,KAKgB;AAAA,MAJhBC,KAIgB,QAJhBA,KAIgB;AAAA,MAHhBC,SAGgB,QAHhBA,SAGgB;AAAA,MAFhBC,WAEgB,QAFhBA,WAEgB;AAAA,MADbC,IACa;;AAChB,MAAMC,QAAQ,GAAGvB,MAAM,CAAC,IAAD,CAAvB;;AADgB,kBAE0CC,QAAQ,CAACe,IAAD,CAFlD;AAAA,MAERQ,SAFQ,aAERA,SAFQ;AAAA,MAEGC,aAFH,aAEGA,aAFH;AAAA,MAEkBC,YAFlB,aAEkBA,YAFlB;AAAA,MAEgCC,KAFhC,aAEgCA,KAFhC;;AAIhB,MAAMC,YAAY,GAAGzB,gBAAgB,iCAChCC,kBADgC,GAEhCiB,WAFgC,EAArC;AAKAtB,EAAAA,SAAS,CAAC,YAAM;AACd0B,IAAAA,aAAa,CAAC;AACZT,MAAAA,IAAI,EAAEQ,SADM;AAEZK,MAAAA,GAAG,EAAEN,QAAQ,CAACO,OAFF;AAGZC,MAAAA,IAAI,EAAE,OAHM;AAIZC,MAAAA,QAJY,oBAIHH,GAJG,EAIOV,KAJP,EAIsB;AAChCU,QAAAA,GAAG,CAACI,aAAJ,CAAkBd,KAAlB;AACD,OANW;AAOZe,MAAAA,UAPY,sBAODL,GAPC,EAOS;AACnBA,QAAAA,GAAG,CAACI,aAAJ,CAAkB,EAAlB;AACD;AATW,KAAD,CAAb;AAWD,GAZQ,EAYN,CAACT,SAAD,EAAYC,aAAZ,CAZM,CAAT;AAcA,sBACE;AAAA,4BACE,QAAC,WAAD;AACE,MAAA,IAAI,EAAED,SADR;AAEE,MAAA,GAAG,EAAED,QAFP;AAGE,MAAA,YAAY,EAAEG;AAHhB,OAIMJ,IAJN;AAAA;AAAA;AAAA;AAAA,aADF,EAOGK,KAAK,iBAAI;AAAM,MAAA,KAAK,EAAE;AAAEQ,QAAAA,KAAK,EAAE;AAAT,OAAb;AAAA,gBAAiCR;AAAjC;AAAA;AAAA;AAAA;AAAA,aAPZ;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAWD,CA1CM;;GAAMZ,a;UAU+Cd,Q;;;KAV/Cc,a","sourcesContent":["import { InputHTMLAttributes, useEffect, useRef } from \"react\";\nimport { useField } from \"@unform/core\";\nimport InputMask, { Props as InputMaskProps } from \"react-input-mask\";\n\nimport MaskedInput from \"react-text-mask\";\nimport createNumberMask from \"text-mask-addons/dist/createNumberMask\";\n\nconst defaultMaskOptions = {\n  prefix: \"$\",\n  suffix: \"\",\n  includeThousandsSeparator: true,\n  thousandsSeparatorSymbol: \",\",\n  allowDecimal: true,\n  decimalSymbol: \".\",\n  decimalLimit: 2, // how many digits allowed after the decimal\n  integerLimit: 7, // limit length of integer numbers\n  allowNegative: false,\n  allowLeadingZeroes: false,\n};\n\ninterface Props extends InputMaskProps {\n  name: string;\n  type?:\n    | \"text\"\n    | \"number\"\n    | \"color\"\n    | \"date\"\n    | \"datetime-local\"\n    | \"email\"\n    | \"hidden\"\n    | \"month\"\n    | \"password\"\n    | \"time\"\n    | \"range\"\n    | \"search\"\n    | \"tel\"\n    | \"url\"\n    | \"week\";\n  label?: string;\n  value?: string;\n  inputMask?: string | undefined;\n\n  maskOptions: {};\n}\n\ntype InputProps = InputHTMLAttributes<HTMLInputElement> & Props;\n\nexport const CurrencyInput = ({\n  name,\n  type,\n  label,\n  value,\n  inputMask,\n  maskOptions,\n  ...rest\n}: InputProps) => {\n  const inputRef = useRef(null);\n  const { fieldName, registerField, defaultValue, error } = useField(name);\n\n  const currencyMask = createNumberMask({\n    ...defaultMaskOptions,\n    ...maskOptions,\n  });\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: \"value\",\n      setValue(ref: any, value: string) {\n        ref.setInputValue(value);\n      },\n      clearValue(ref: any) {\n        ref.setInputValue(\"\");\n      },\n    });\n  }, [fieldName, registerField]);\n\n  return (\n    <div>\n      <MaskedInput\n        name={fieldName}\n        ref={inputRef}\n        defaultValue={defaultValue}\n        {...rest}\n      />\n      {error && <span style={{ color: \"#f00\" }}>{error}</span>}\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}