{"ast":null,"code":"import { LeafletProvider, addClassName, useLeafletContext } from '@react-leaflet/core';\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { createPortal } from 'react-dom';\nconst DEFAULT_PANES = ['mapPane', 'markerPane', 'overlayPane', 'popupPane', 'shadowPane', 'tilePane', 'tooltipPane'];\n\nfunction omitPane(obj, pane) {\n  const {\n    [pane]: _p,\n    ...others\n  } = obj;\n  return others;\n}\n\nfunction createPane(props, context) {\n  var _props$pane;\n\n  const name = props.name;\n\n  if (DEFAULT_PANES.indexOf(name) !== -1) {\n    throw new Error(`You must use a unique name for a pane that is not a default Leaflet pane: ${name}`);\n  }\n\n  if (context.map.getPane(name) != null) {\n    throw new Error(`A pane with this name already exists: ${name}`);\n  }\n\n  const parentPaneName = (_props$pane = props.pane) != null ? _props$pane : context.pane;\n  const parentPane = parentPaneName ? context.map.getPane(parentPaneName) : undefined;\n  const element = context.map.createPane(name, parentPane);\n\n  if (props.className != null) {\n    addClassName(element, props.className);\n  }\n\n  if (props.style != null) {\n    Object.keys(props.style).forEach(key => {\n      // @ts-ignore\n      element.style[key] = props.style[key];\n    });\n  }\n\n  return element;\n}\n\nexport function Pane(props) {\n  const [paneElement, setPaneElement] = useState();\n  const context = useLeafletContext();\n  const newContext = useMemo(() => ({ ...context,\n    pane: props.name\n  }), [context]);\n  useEffect(() => {\n    setPaneElement(createPane(props, context));\n    return function removeCreatedPane() {\n      const pane = context.map.getPane(props.name);\n      pane == null ? void 0 : pane.remove == null ? void 0 : pane.remove(); // @ts-ignore map internals\n\n      if (context.map._panes != null) {\n        // @ts-ignore map internals\n        context.map._panes = omitPane(context.map._panes, props.name); // @ts-ignore map internals\n\n        context.map._paneRenderers = omitPane( // @ts-ignore map internals\n        context.map._paneRenderers, props.name);\n      }\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return props.children != null && paneElement != null ? /*#__PURE__*/createPortal( /*#__PURE__*/React.createElement(LeafletProvider, {\n    value: newContext\n  }, props.children), paneElement) : null;\n}","map":{"version":3,"sources":["/home/igor/www/roommates/node_modules/react-leaflet/esm/Pane.js"],"names":["LeafletProvider","addClassName","useLeafletContext","React","useState","useEffect","useMemo","createPortal","DEFAULT_PANES","omitPane","obj","pane","_p","others","createPane","props","context","_props$pane","name","indexOf","Error","map","getPane","parentPaneName","parentPane","undefined","element","className","style","Object","keys","forEach","key","Pane","paneElement","setPaneElement","newContext","removeCreatedPane","remove","_panes","_paneRenderers","children","createElement","value"],"mappings":"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","sourcesContent":["import { LeafletProvider, addClassName, useLeafletContext } from '@react-leaflet/core';\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { createPortal } from 'react-dom';\nconst DEFAULT_PANES = ['mapPane', 'markerPane', 'overlayPane', 'popupPane', 'shadowPane', 'tilePane', 'tooltipPane'];\n\nfunction omitPane(obj, pane) {\n  const {\n    [pane]: _p,\n    ...others\n  } = obj;\n  return others;\n}\n\nfunction createPane(props, context) {\n  var _props$pane;\n\n  const name = props.name;\n\n  if (DEFAULT_PANES.indexOf(name) !== -1) {\n    throw new Error(`You must use a unique name for a pane that is not a default Leaflet pane: ${name}`);\n  }\n\n  if (context.map.getPane(name) != null) {\n    throw new Error(`A pane with this name already exists: ${name}`);\n  }\n\n  const parentPaneName = (_props$pane = props.pane) != null ? _props$pane : context.pane;\n  const parentPane = parentPaneName ? context.map.getPane(parentPaneName) : undefined;\n  const element = context.map.createPane(name, parentPane);\n\n  if (props.className != null) {\n    addClassName(element, props.className);\n  }\n\n  if (props.style != null) {\n    Object.keys(props.style).forEach(key => {\n      // @ts-ignore\n      element.style[key] = props.style[key];\n    });\n  }\n\n  return element;\n}\n\nexport function Pane(props) {\n  const [paneElement, setPaneElement] = useState();\n  const context = useLeafletContext();\n  const newContext = useMemo(() => ({ ...context,\n    pane: props.name\n  }), [context]);\n  useEffect(() => {\n    setPaneElement(createPane(props, context));\n    return function removeCreatedPane() {\n      const pane = context.map.getPane(props.name);\n      pane == null ? void 0 : pane.remove == null ? void 0 : pane.remove(); // @ts-ignore map internals\n\n      if (context.map._panes != null) {\n        // @ts-ignore map internals\n        context.map._panes = omitPane(context.map._panes, props.name); // @ts-ignore map internals\n\n        context.map._paneRenderers = omitPane( // @ts-ignore map internals\n        context.map._paneRenderers, props.name);\n      }\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return props.children != null && paneElement != null ? /*#__PURE__*/createPortal( /*#__PURE__*/React.createElement(LeafletProvider, {\n    value: newContext\n  }, props.children), paneElement) : null;\n}"]},"metadata":{},"sourceType":"module"}