{"ast":null,"code":"import { createOverlayComponent } from '@react-leaflet/core';\nimport { Popup as LeafletPopup } from 'leaflet';\nimport { useEffect } from 'react';\nexport var Popup = createOverlayComponent(function createPopup(props, context) {\n  return {\n    instance: new LeafletPopup(props, context.overlayContainer),\n    context: context\n  };\n}, function usePopupLifecycle(element, context, props, setOpen) {\n  var onClose = props.onClose,\n      onOpen = props.onOpen,\n      position = props.position;\n  useEffect(function addPopup() {\n    var instance = element.instance;\n\n    function onPopupOpen(event) {\n      if (event.popup === instance) {\n        instance.update();\n        setOpen(true);\n        onOpen == null ? void 0 : onOpen();\n      }\n    }\n\n    function onPopupClose(event) {\n      if (event.popup === instance) {\n        setOpen(false);\n        onClose == null ? void 0 : onClose();\n      }\n    }\n\n    context.map.on({\n      popupopen: onPopupOpen,\n      popupclose: onPopupClose\n    });\n\n    if (context.overlayContainer == null) {\n      // Attach to a Map\n      if (position != null) {\n        instance.setLatLng(position);\n      }\n\n      instance.openOn(context.map);\n    } else {\n      // Attach to container component\n      context.overlayContainer.bindPopup(instance);\n    }\n\n    return function removePopup() {\n      context.map.off({\n        popupopen: onPopupOpen,\n        popupclose: onPopupClose\n      });\n\n      if (context.overlayContainer == null) {\n        context.map.removeLayer(instance);\n      } else {\n        context.overlayContainer.unbindPopup();\n      }\n    };\n  }, [element, context, setOpen, onClose, onOpen, position]);\n});","map":{"version":3,"sources":["/home/igor/www/roommates-web/node_modules/react-leaflet/esm/Popup.js"],"names":["createOverlayComponent","Popup","LeafletPopup","useEffect","createPopup","props","context","instance","overlayContainer","usePopupLifecycle","element","setOpen","onClose","onOpen","position","addPopup","onPopupOpen","event","popup","update","onPopupClose","map","on","popupopen","popupclose","setLatLng","openOn","bindPopup","removePopup","off","removeLayer","unbindPopup"],"mappings":"AAAA,SAASA,sBAAT,QAAuC,qBAAvC;AACA,SAASC,KAAK,IAAIC,YAAlB,QAAsC,SAAtC;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAO,IAAMF,KAAK,GAAGD,sBAAsB,CAAC,SAASI,WAAT,CAAqBC,KAArB,EAA4BC,OAA5B,EAAqC;AAC/E,SAAO;AACLC,IAAAA,QAAQ,EAAE,IAAIL,YAAJ,CAAiBG,KAAjB,EAAwBC,OAAO,CAACE,gBAAhC,CADL;AAELF,IAAAA,OAAO,EAAPA;AAFK,GAAP;AAID,CAL0C,EAKxC,SAASG,iBAAT,CAA2BC,OAA3B,EAAoCJ,OAApC,EAA6CD,KAA7C,EAAoDM,OAApD,EAA6D;AAAA,MAE5DC,OAF4D,GAK1DP,KAL0D,CAE5DO,OAF4D;AAAA,MAG5DC,MAH4D,GAK1DR,KAL0D,CAG5DQ,MAH4D;AAAA,MAI5DC,QAJ4D,GAK1DT,KAL0D,CAI5DS,QAJ4D;AAM9DX,EAAAA,SAAS,CAAC,SAASY,QAAT,GAAoB;AAAA,QAE1BR,QAF0B,GAGxBG,OAHwB,CAE1BH,QAF0B;;AAK5B,aAASS,WAAT,CAAqBC,KAArB,EAA4B;AAC1B,UAAIA,KAAK,CAACC,KAAN,KAAgBX,QAApB,EAA8B;AAC5BA,QAAAA,QAAQ,CAACY,MAAT;AACAR,QAAAA,OAAO,CAAC,IAAD,CAAP;AACAE,QAAAA,MAAM,IAAI,IAAV,GAAiB,KAAK,CAAtB,GAA0BA,MAAM,EAAhC;AACD;AACF;;AAED,aAASO,YAAT,CAAsBH,KAAtB,EAA6B;AAC3B,UAAIA,KAAK,CAACC,KAAN,KAAgBX,QAApB,EAA8B;AAC5BI,QAAAA,OAAO,CAAC,KAAD,CAAP;AACAC,QAAAA,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,EAAlC;AACD;AACF;;AAEDN,IAAAA,OAAO,CAACe,GAAR,CAAYC,EAAZ,CAAe;AACbC,MAAAA,SAAS,EAAEP,WADE;AAEbQ,MAAAA,UAAU,EAAEJ;AAFC,KAAf;;AAKA,QAAId,OAAO,CAACE,gBAAR,IAA4B,IAAhC,EAAsC;AACpC;AACA,UAAIM,QAAQ,IAAI,IAAhB,EAAsB;AACpBP,QAAAA,QAAQ,CAACkB,SAAT,CAAmBX,QAAnB;AACD;;AAEDP,MAAAA,QAAQ,CAACmB,MAAT,CAAgBpB,OAAO,CAACe,GAAxB;AACD,KAPD,MAOO;AACL;AACAf,MAAAA,OAAO,CAACE,gBAAR,CAAyBmB,SAAzB,CAAmCpB,QAAnC;AACD;;AAED,WAAO,SAASqB,WAAT,GAAuB;AAC5BtB,MAAAA,OAAO,CAACe,GAAR,CAAYQ,GAAZ,CAAgB;AACdN,QAAAA,SAAS,EAAEP,WADG;AAEdQ,QAAAA,UAAU,EAAEJ;AAFE,OAAhB;;AAKA,UAAId,OAAO,CAACE,gBAAR,IAA4B,IAAhC,EAAsC;AACpCF,QAAAA,OAAO,CAACe,GAAR,CAAYS,WAAZ,CAAwBvB,QAAxB;AACD,OAFD,MAEO;AACLD,QAAAA,OAAO,CAACE,gBAAR,CAAyBuB,WAAzB;AACD;AACF,KAXD;AAYD,GAjDQ,EAiDN,CAACrB,OAAD,EAAUJ,OAAV,EAAmBK,OAAnB,EAA4BC,OAA5B,EAAqCC,MAArC,EAA6CC,QAA7C,CAjDM,CAAT;AAkDD,CA7D0C,CAApC","sourcesContent":["import { createOverlayComponent } from '@react-leaflet/core';\nimport { Popup as LeafletPopup } from 'leaflet';\nimport { useEffect } from 'react';\nexport const Popup = createOverlayComponent(function createPopup(props, context) {\n  return {\n    instance: new LeafletPopup(props, context.overlayContainer),\n    context\n  };\n}, function usePopupLifecycle(element, context, props, setOpen) {\n  const {\n    onClose,\n    onOpen,\n    position\n  } = props;\n  useEffect(function addPopup() {\n    const {\n      instance\n    } = element;\n\n    function onPopupOpen(event) {\n      if (event.popup === instance) {\n        instance.update();\n        setOpen(true);\n        onOpen == null ? void 0 : onOpen();\n      }\n    }\n\n    function onPopupClose(event) {\n      if (event.popup === instance) {\n        setOpen(false);\n        onClose == null ? void 0 : onClose();\n      }\n    }\n\n    context.map.on({\n      popupopen: onPopupOpen,\n      popupclose: onPopupClose\n    });\n\n    if (context.overlayContainer == null) {\n      // Attach to a Map\n      if (position != null) {\n        instance.setLatLng(position);\n      }\n\n      instance.openOn(context.map);\n    } else {\n      // Attach to container component\n      context.overlayContainer.bindPopup(instance);\n    }\n\n    return function removePopup() {\n      context.map.off({\n        popupopen: onPopupOpen,\n        popupclose: onPopupClose\n      });\n\n      if (context.overlayContainer == null) {\n        context.map.removeLayer(instance);\n      } else {\n        context.overlayContainer.unbindPopup();\n      }\n    };\n  }, [element, context, setOpen, onClose, onOpen, position]);\n});"]},"metadata":{},"sourceType":"module"}