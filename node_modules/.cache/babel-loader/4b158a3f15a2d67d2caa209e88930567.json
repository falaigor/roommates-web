{"ast":null,"code":"import _objectSpread from \"/home/igor/www/roommates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"/home/igor/www/roommates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"/home/igor/www/roommates/src/components/Input/Textarea.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useEffect, useRef } from \"react\";\nimport { useField } from \"@unform/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var Textarea = function Textarea(_ref) {\n  _s();\n\n  var name = _ref.name,\n      maxLength = _ref.maxLength,\n      rest = _objectWithoutProperties(_ref, [\"name\", \"maxLength\"]);\n\n  var textareaRef = useRef(null);\n\n  var _useField = useField(name),\n      fieldName = _useField.fieldName,\n      _useField$defaultValu = _useField.defaultValue,\n      defaultValue = _useField$defaultValu === void 0 ? \"\" : _useField$defaultValu,\n      registerField = _useField.registerField,\n      error = _useField.error;\n\n  useEffect(function () {\n    registerField({\n      name: fieldName,\n      ref: textareaRef,\n      getValue: function getValue(ref) {\n        return ref.current.value;\n      },\n      setValue: function setValue(ref, value) {\n        ref.current.value = value;\n      },\n      clearValue: function clearValue(ref) {\n        ref.current.value = \"\";\n      }\n    });\n  }, [fieldName, registerField]);\n  return /*#__PURE__*/_jsxDEV(\"textarea\", _objectSpread({\n    ref: textareaRef,\n    id: fieldName,\n    defaultValue: defaultValue\n  }, rest), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Textarea, \"r1KNBn43qWYbIxpM60Kfrfhd4rg=\", false, function () {\n  return [useField];\n});\n\n_c = Textarea;\n\nvar _c;\n\n$RefreshReg$(_c, \"Textarea\");","map":{"version":3,"sources":["/home/igor/www/roommates/src/components/Input/Textarea.tsx"],"names":["useEffect","useRef","useField","Textarea","name","maxLength","rest","textareaRef","fieldName","defaultValue","registerField","error","ref","getValue","current","value","setValue","clearValue"],"mappings":";;;;;;;AAAA,SAAiCA,SAAjC,EAA4CC,MAA5C,QAA0D,OAA1D;AACA,SAASC,QAAT,QAAyB,cAAzB;;AASA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAAiD;AAAA;;AAAA,MAA9CC,IAA8C,QAA9CA,IAA8C;AAAA,MAAxCC,SAAwC,QAAxCA,SAAwC;AAAA,MAA1BC,IAA0B;;AACvE,MAAMC,WAAW,GAAGN,MAAM,CAAC,IAAD,CAA1B;;AADuE,kBAERC,QAAQ,CAACE,IAAD,CAFA;AAAA,MAE/DI,SAF+D,aAE/DA,SAF+D;AAAA,wCAEpDC,YAFoD;AAAA,MAEpDA,YAFoD,sCAErC,EAFqC;AAAA,MAEjCC,aAFiC,aAEjCA,aAFiC;AAAA,MAElBC,KAFkB,aAElBA,KAFkB;;AAIvEX,EAAAA,SAAS,CAAC,YAAM;AACdU,IAAAA,aAAa,CAAC;AACZN,MAAAA,IAAI,EAAEI,SADM;AAEZI,MAAAA,GAAG,EAAEL,WAFO;AAGZM,MAAAA,QAAQ,EAAE,kBAACD,GAAD,EAAS;AACjB,eAAOA,GAAG,CAACE,OAAJ,CAAYC,KAAnB;AACD,OALW;AAMZC,MAAAA,QAAQ,EAAE,kBAACJ,GAAD,EAAMG,KAAN,EAAgB;AACxBH,QAAAA,GAAG,CAACE,OAAJ,CAAYC,KAAZ,GAAoBA,KAApB;AACD,OARW;AASZE,MAAAA,UAAU,EAAE,oBAACL,GAAD,EAAS;AACnBA,QAAAA,GAAG,CAACE,OAAJ,CAAYC,KAAZ,GAAoB,EAApB;AACD;AAXW,KAAD,CAAb;AAaD,GAdQ,EAcN,CAACP,SAAD,EAAYE,aAAZ,CAdM,CAAT;AAgBA,sBACE;AACE,IAAA,GAAG,EAAEH,WADP;AAEE,IAAA,EAAE,EAAEC,SAFN;AAGE,IAAA,YAAY,EAAEC;AAHhB,KAIMH,IAJN;AAAA;AAAA;AAAA;AAAA,WADF;AAQD,CA5BM;;GAAMH,Q;UAEoDD,Q;;;KAFpDC,Q","sourcesContent":["import { TextareaHTMLAttributes, useEffect, useRef } from \"react\";\nimport { useField } from \"@unform/core\";\n\ninterface Props {\n  name: string;\n  maxLength: number;\n}\n\ntype TextareaProps = TextareaHTMLAttributes<HTMLTextAreaElement> & Props;\n\nexport const Textarea = ({ name, maxLength, ...rest }: TextareaProps) => {\n  const textareaRef = useRef(null);\n  const { fieldName, defaultValue = \"\", registerField, error } = useField(name);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: textareaRef,\n      getValue: (ref) => {\n        return ref.current.value;\n      },\n      setValue: (ref, value) => {\n        ref.current.value = value;\n      },\n      clearValue: (ref) => {\n        ref.current.value = \"\";\n      },\n    });\n  }, [fieldName, registerField]);\n\n  return (\n    <textarea\n      ref={textareaRef}\n      id={fieldName}\n      defaultValue={defaultValue}\n      {...rest}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}